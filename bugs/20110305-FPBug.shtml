<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html dir="ltr" lang="en"><head>

  
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Pale Moon - 20110305/FPBug</title><!-- Keep the http-equiv meta tag for IE8 -->
  

  

  
  <meta http-equiv="X-UA-Compatible" content="IE=8">

  
  <link rel="stylesheet" type="text/css" media="screen,projection" href="../menustyle.css">

  
  <link rel="stylesheet" type="text/css" media="screen,projection" href="../pagestyle.css"></head><body>
<table class="maintable" align="center" bgcolor="#f9f9f9" border="0" cellpadding="0" cellspacing="0">

  <tbody>
    <tr>
      <th><img style="border: 0px solid ; width: 800px; height: 82px;" alt="The Pale Moon Project - Custom-built and optimized Firefox browsers for Windows Operating Systems" src="../pm-bannerheader.jpg" align="top" hspace="0" vspace="0"><br>
      </th>
    </tr>
    <tr align="left">
      <td style="padding: 0pt; vertical-align: top; background-color: rgb(82, 114, 161);">
      <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">
      <a href="javascript:history.back()">[ &lt;-- Back ]</a><br>
<h1>FP bug 20110305<br>
      </h1>
A bug has been found in the implementation of JavaScript:Date().<br>
      <br>
      <span style="font-weight: bold;">Reporter:</span> Sebastian Hütter<br>
      <span style="font-weight: bold;"><br>
Affects the following:</span> <br>
      <span style="font-weight: bold;">Functions:</span> Date
manipulation, jQuery calendars, and similar. Possibly also other
functions that use high precision numbers in complex calculations.<br>
      <span style="font-weight: bold;">Builds:</span> All regular
builds. Athlon XP build unaffected.<br>
      <br>
      <span style="font-weight: bold;">Cause:</span>
Floating point
inaccuracies in compiled code. MSVC specific. Should not occur as
compile flags are already in place on Tracemonkey/nanoJIT to enforce
accuracy/mitigate MSVC++ errors, but apparently higher functions still
suffer from intermediate rounding when variables are passed on.<br>
      <br>
      <span style="font-weight: bold;">Details:</span><br>
By default, the compiler uses the coprocessor's 80-bit registers to
hold the intermediate results of floating-point calculations. This
increases program speed and decreases program size. Because the
calculation involves floating-point data types that are represented in
memory by less than 80 bits, however, carrying the extra bits of
precision (80 bits minus the number of bits in a smaller floating-point
type) through a lengthy calculation can produce inconsistent results.<br>
In addition, using fast FP for overlying functions may downcast
intermediate computation results, causing subsequent errors: the
compiler will typically attempt to maintain at least the precision
specified by the source code. However, in some instances the compiler
may choose to perform intermediate expressions at a <i>lower precision</i>
than specified in the source code.<br>
      <br>
      <span style="font-weight: bold;">Solution:</span><br>
Apply proper rounding of large numbers when passing them from one
function to the next. This can be done globally or per-function.<br>
      <br>
      <span style="font-weight: bold;">Implementation:</span><br>
- 3.6.15 and later will be built with a global solution, to cut this
bug short for any yet-unknown other functions also suffering from
precision loss or rounding errors. <br>
This may cause a small speed penalty as a tradeoff for accuracy, since
intrinsics will be disabled for floating point functions, always doing
a complete function call instead of passing the values directly to the
FPU. <br>
- Critical-path libraries will not be changed as they don't seem to
be affected by this problem, to keep maximum efficiency.<br>
      <br>
      <span style="font-weight: bold;">Implementation alternative:</span><br>
- 3.6.16/4.0.6 and later will be built with global fast floating point
model enabled again like before, to maximize efficiency. To prevent
this bug, correcting a makefile mistake for js by adding CXXFLAGS +=
-fp:precise in addition to the (already present) CFLAGS (js is
mostly/all C++; flag wasn't picked up)<br>
      <br>
<a href="javascript:history.back()">[ &lt;-- Back ]</a><br>
      <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top; text-align: center;"><!--#include virtual="/nav/footer.html" -->
      <br>
      </td>
    </tr>
  </tbody>
</table>

<br>

<br>

</body></html>
